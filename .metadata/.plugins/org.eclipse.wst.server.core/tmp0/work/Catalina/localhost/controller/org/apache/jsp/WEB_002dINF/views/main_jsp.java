/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.50
 * Generated at: 2024-10-08 06:38:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1612850415545L));
    _jspx_dependants.put("jar:file:/C:/eGovFrame-4.0.0/workspace.edu/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/SpringMVC03/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!--  추가함! 자동완성 사용하기 -->\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("   href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<script\r\n");
      out.write("   src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("   src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("   <div class=\"container\">\r\n");
      out.write("      <h2>AI School IoT</h2>\r\n");
      out.write("      <div class=\"panel panel-default\">\r\n");
      out.write("         <div class=\"panel-heading\">IoT List</div>\r\n");
      out.write("         <div class=\"panel-body\">\r\n");
      out.write("            <table id=\"tlist\" class=\"table table-bordered table-hover\">\r\n");
      out.write("               <tr>\r\n");
      out.write("                  <td>LED1</td>\r\n");
      out.write("                  <td>\r\n");
      out.write("                     <button onclick=\"ledDo('LED1', 'ON')\" id=\"btn1on\" class=\"btn\">ON</button>\r\n");
      out.write("                     <button onclick=\"ledDo('LED1', 'OFF')\"id=\"btn1off\" class=\"btn\">OFF</button>\r\n");
      out.write("                  </td>\r\n");
      out.write("               </tr>\r\n");
      out.write("               <tr>\r\n");
      out.write("                  <td>LED2</td>\r\n");
      out.write("                  <td>\r\n");
      out.write("                     <button onclick=\"ledDo('LED2', 'ON')\" id=\"btn2on\" class=\"btn\">ON</button>\r\n");
      out.write("                     <button onclick=\"ledDo('LED2', 'OFF')\" id=\"btn2off\" class=\"btn\">OFF</button>\r\n");
      out.write("                  </td>\r\n");
      out.write("               </tr>\r\n");
      out.write("               <tr>\r\n");
      out.write("                  <td >Servo</td>\r\n");
      out.write("                  <td>\r\n");
      out.write("                     <input id=\"servo\" type=\"number\" class=\"form-control\" style=\"width: 150px; float:left; margin :10px;\">\r\n");
      out.write("                     &nbsp;&nbsp; \r\n");
      out.write("                     <!-- 띄어쓰기 한칸 -->\r\n");
      out.write("                     <input type=\"range\" id=\"servoRange\" oninput=\"servoRange()\" min=\"0\" max=\"180\" style=\"width:200px; float:left; margin-top:10px;\">\r\n");
      out.write("                     <button onclick=\"servoDo()\" type=\"button\" class=\"btn\">angle</button>\r\n");
      out.write("                  </td>\r\n");
      out.write("               </tr>\r\n");
      out.write("            </table>\r\n");
      out.write("         </div>\r\n");
      out.write("         <div class=\"panel-footer\">사물지능 - 박병관</div>\r\n");
      out.write("      </div>\r\n");
      out.write("   </div>\r\n");
      out.write("\r\n");
      out.write("   <script type=\"text/javascript\">\r\n");
      out.write("   \r\n");
      out.write("   \t\tloadIot(); // 프로그램 실행하자마자 실행되도록\r\n");
      out.write("   \t\tfunction loadIot(){\r\n");
      out.write("   \t\t\t$.ajax({\r\n");
      out.write("   \t\t\turl : \"loadIot\",\r\n");
      out.write("   \t\t\ttype : \"get\",\r\n");
      out.write("   \t\t\tdataType : \"json\",\r\n");
      out.write("   \t\t\tsuccess : makeView,\r\n");
      out.write("   \t\t\terror : function(){alert(\"error...\");}\r\n");
      out.write("   \t\t});\r\n");
      out.write("   \t}\r\n");
      out.write("   \t\t\r\n");
      out.write("   \t\tfunction servoRange(){\r\n");
      out.write("   \t\t\t$(\"#servo\").val($(\"#servoRange\").val()); // 클릭했을 때 됌\t\r\n");
      out.write("   \t\t}\r\n");
      out.write("   \t\t\r\n");
      out.write("   \t\t\r\n");
      out.write("   \t\t// DB에 있는 값 보여주기\r\n");
      out.write("   \t\tfunction makeView(data){\r\n");
      out.write("   \t\t\tconsole.log(data);\r\n");
      out.write("   \t\t\t\r\n");
      out.write("   \t\t\t// 모든태그에 btn-primary제거\r\n");
      out.write("   \t\t\t$(\"#btn1on\").removeClass(\"btn-primary\");\r\n");
      out.write("   \t\t\t$(\"#btn1off\").removeClass(\"btn-primary\");\r\n");
      out.write("   \t\t\t$(\"#btn2on\").removeClass(\"btn-primary\");\r\n");
      out.write("   \t\t\t$(\"#btn2off\").removeClass(\"btn-primary\");\r\n");
      out.write(" \t\t\r\n");
      out.write("   \t\t\t$(\"#servo\").val(data.servo);\r\n");
      out.write("   \t\t\t$(\"#servoRange\").val(data.servo);\r\n");
      out.write("   \t\r\n");
      out.write("   \t\t\tif(data.led1 == \"ON\"){\r\n");
      out.write("   \t\t\t\t$(\"#btn1on\").addClass(\"btn-primary\"); // 클래스 추가\r\n");
      out.write("   \t\t\t}else{\r\n");
      out.write("   \t\t\t\t$(\"#btn1off\").addClass(\"btn-primary\");\r\n");
      out.write("   \t\t\t}\r\n");
      out.write("   \t\t\t\r\n");
      out.write("   \t\t\tif(data.led2 == \"ON\"){\r\n");
      out.write("   \t\t\t\t$(\"#btn2on\").addClass(\"btn-primary\");\r\n");
      out.write("   \t\t\t}else{\r\n");
      out.write("   \t\t\t\t$(\"#btn2off\").addClass(\"btn-primary\");\r\n");
      out.write("   \t\t\t}\r\n");
      out.write("   \t\t}\r\n");
      out.write("   \t\t\r\n");
      out.write("   \t\t// LED\r\n");
      out.write("   \t\tfunction ledDo(LED,POWER){\r\n");
      out.write("   \t\t\t// LED : 1 or 2\r\n");
      out.write("   \t\t\t// POWER : on or off\r\n");
      out.write("   \t\t\tconsole.log(\"ledDo확인\")\r\n");
      out.write("   \t\t\t$.ajax({\r\n");
      out.write("   \t\t\t\turl : \"ledDo\",\r\n");
      out.write("   \t\t\t\ttype : \"get\",\r\n");
      out.write("   \t\t\t\tdata : {\"LED\" : LED, \"POWER\" : POWER},\r\n");
      out.write("   \t\t\t\t// LED라는 이름으로 위에서 받은 값을 보내줌\r\n");
      out.write("   \t\t\t\tsuccess : loadIot, //-> 콜백함수는 괄호X\r\n");
      out.write("   \t\t\t\terror : function(){ alert(\"error...\");}\r\n");
      out.write("   \t\t\t})\r\n");
      out.write("   \t\t}\r\n");
      out.write("   \t\t\r\n");
      out.write("   \t\t// SERVO\r\n");
      out.write("   \t\tfunction servoDo() {\r\n");
      out.write("   \t\t    console.log(\"servoDo클릭\");\r\n");
      out.write("   \t\t    // 매개변수 없어도 input태그 안에 있는 값 가져오기!\r\n");
      out.write("   \t\t    var servoValue = $(\"#servo\").val(); \r\n");
      out.write("   \t\t    console.log(servoValue);\r\n");
      out.write("   \t\t    $.ajax({\r\n");
      out.write("   \t\t        url: \"servoDo\", \r\n");
      out.write("   \t\t        type: \"get\",\r\n");
      out.write("   \t\t        data: {\"servo\": servoValue }, \r\n");
      out.write("   \t\t     \tsuccess : loadIot,\r\n");
      out.write("   \t\t     \terror : function(){ alert(\"error...\");}\r\n");
      out.write("   \t\t    });\r\n");
      out.write("   \t\t}\r\n");
      out.write("\r\n");
      out.write("   </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
